<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包-->
	<context:component-scan base-package="com.icff.tutoring.controller">
	<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
    <!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
   <!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	 <bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
     <property name="serializerFeatures">
      <array>
          <value>WriteMapNullValue</value>
          <value>WriteDateUseDateFormat</value>
      </array>
     </property>
     </bean>
   <mvc:annotation-driven conversion-service="conversionService" validator="myvalidator" >
   <mvc:message-converters register-defaults="true">
       <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
        <property name="supportedMediaTypes">
           <list>
           <value>application/json;charset=UTF-8</value>
             </list>
      </property>
       <property name="fastJsonConfig" ref="fastJsonConfig"/>
      </bean>
      </mvc:message-converters>
   </mvc:annotation-driven>
   <!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/view/"/>
		<!-- 配置jsp路径的后缀 -->
		<!-- <property name="suffix" value=".jsp"/> -->
	</bean>
	
	<!-- 校验器 -->
	<bean id="myvalidator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器-->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名-->
		<property name="basenames">   
       	 <list>    
            <value>classpath:ValidationMessages</value> 
       	 </list>   
    	</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器s -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.icff.tutoring.converter.DateConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 如果使用<mvc:annotation-driven /> 不需要定义josn处理的bean -->
	
	<!-- 全局异常处理器
	只要实现HandlerExceptionResolver接口就是全局异常处理器
	 -->
	<bean class="com.icff.tutoring.exception.GlobalException"></bean>
	<!-- 文件上传 -->
	<bean name="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    	<property name="defaultEncoding" value="utf-8"/>
    	<property name="maxUploadSize" value="102400" />  
	</bean>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 异常 -->
				<prop key="java.lang.Throwable">/error.jsp</prop>
				<!-- 文件上传超过最大允许容量异常 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/front/error.jsp</prop>
			</props>
		</property>
	</bean>
	<!-- 静态资源解析 在使用rest模式访问静态资源时，由于web.xml配置使用的是 /的url-pattern，故未找到handler，会造成404错误。
	包括 ：js、css、img、..
    spring 3.0使用这种方式
	 <mvc:resources location="/js/" mapping="/js/**"/>
	 <mvc:resources location="/img/" mapping="/img/**"/>
	 <mvc:resources location="/css/" mapping="/css/**"/>
	-->
	<mvc:default-servlet-handler/>
	
	  <mvc:interceptors>
	 	<mvc:interceptor>
	 		<mvc:mapping path="/**"/>
	 		<bean class="com.icff.tutoring.interceptor.LogInterceptor"></bean>
	 	</mvc:interceptor>
	 	<mvc:interceptor>
	 		 <!-- 进行拦截：/**表示拦截所有controller -->
             <mvc:mapping path="/user/asTutor" />
             <mvc:mapping path="/user/asStudent" />
             <mvc:mapping path="/admin/grade/*" />
             <mvc:mapping path="/admin/tutortype/*" />
             <mvc:mapping path="/admin/area/*" />
             <mvc:mapping path="/admin/school/*" />
             <!-- 不进行拦截 -->
             <mvc:exclude-mapping path="user/appoint"/>
             <mvc:exclude-mapping path="admin/login"/>
	 		<bean class="com.icff.tutoring.interceptor.LoginInterceptor"></bean>
	 	</mvc:interceptor>
	 </mvc:interceptors>


</beans>